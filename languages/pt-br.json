{
  "header": {
    "presentation": "OI üëã EU SOU NATHAN",
    "stack": "FULL STACK DEVELOPER"
  },
  "body": {
    "aboutMe": {
      "title": "Sobre mim",
      "descripion": "Estou atualmente matriculado no curso de Ci√™ncia da Computa√ß√£o na Escola Superior Dom Helder C√¢mara, onde estou imerso no mundo da tecnologia e do aprendizado cont√≠nuo. Minhas habilidades t√©cnicas s√£o aprimoradas por um n√≠vel t√©cnico de profici√™ncia em ingl√™s. Tenho uma trajet√≥ria que abrange projetos variados, desde experi√™ncia no desenvolvimento de sistemas at√© trabalhos independentes em projetos envolvendo tecnologias diversificadas. Estou animado em explorar oportunidades de colabora√ß√£o em projetos desafiadores!"
    },
    "technologies": {
      "title": "Tecnologias",
      "description": "Minhas habilidades t√©cnicas abrangem diversas tecnologias amplamente utilizadas na ind√∫stria, incluindo Java, JavaScript, Node.js e React. Tenho experi√™ncia pr√°tica em desenvolvimento web, com conhecimento em ferramentas como Git, GitHub, Composer e bancos de dados como MySQL, PostgreSQL e MongoDB. Al√©m disso, domino tanto o front-end quanto o back-end, incluindo linguagens como PHP e SQL, permitindo contribuir em todas as etapas do desenvolvimento de software."
    },
    "projects": {
      "title": "Projetos",
      "descripion": "Aqui est√£o alguns dos meus projetos de desenvolvimento web. Estou orgulhoso do trabalho que fiz e espero que voc√™ goste de v√™-los. Sinta-se √† vontade para entrar em contato comigo se tiver alguma d√∫vida ou coment√°rio."
    }
  },
  "portfolio": [
    {
      "title": "Prolinx - CSApp",
      "description": "Este projeto, desenvolvido para a empresa Prolinx, √© um sistema de gerenciamento de contratos destinado ao setor de sucesso do cliente. O CSApp foi constru√≠do com uma API pr√≥pria desenvolvida em NodeJS e uma interface front-end em ReactJS, garantindo uma solu√ß√£o robusta e eficiente para o gerenciamento de contratos.",
      "link": "/projetos/csapp/"
    },
    {
      "title": "Movie Match",
      "description": "Movie Match √© um sistema de recomenda√ß√£o de filmes que combina avalia√ß√µes de g√™neros e Processamento de Linguagem Natural (NLP) para oferecer recomenda√ß√µes personalizadas aos usu√°rios. As recomenda√ß√µes s√£o geradas com base nas prefer√™ncias e avalia√ß√µes dos usu√°rios, proporcionando uma experi√™ncia de descoberta de filmes mais relevante e personalizada.",
      "link": "/projetos/movie-match/"
    },
    {
      "title": "Britaldo Estoque",
      "description": "Britaldo Estoque √© uma aplica√ß√£o web para a escola Britaldo Soares, com o objetivo de oferecer um controle de estoque mais eficiente, seguro e moderno. A aplica√ß√£o permite √† institui√ß√£o abandonar o controle de estoque em papel, proporcionando uma solu√ß√£o escal√°vel e adapt√°vel para outras institui√ß√µes de ensino e empresas. Nossa equipe de quatro integrantes utilizou tecnologias modernas para garantir uma experi√™ncia de usu√°rio superior e uma infraestrutura robusta.",
      "link": "/projetos/britaldo-estoque/"
    },
    {
      "title": "Sistema de Reconhecimento Facial",
      "description": "Sistema de reconhecimento facial desenvolvido utilizando os modelos pr√©-treinados do TensorFlow.js e a biblioteca Face API. O objetivo foi criar uma solu√ß√£o eficaz e acess√≠vel, focada na implementa√ß√£o direta no front-end, permitindo a execu√ß√£o em dispositivos com processadores menos potentes sem comprometer a precis√£o. O sistema utiliza a dist√¢ncia euclidiana entre pontos faciais para verificar a similaridade entre as faces cadastradas e as detectadas.",
      "link": "/projetos/sistema-reconhecimento-facial/"
    }
  ],
  "projects": {
    "csapp": {
      "title": "Prolinx - CSApp",
      "description": "Este projeto, desenvolvido para a empresa Prolinx, √© um sistema de gerenciamento de contratos destinado ao setor de sucesso do cliente. O CSApp foi constru√≠do com uma API pr√≥pria desenvolvida em NodeJS e uma interface front-end em ReactJS, garantindo uma solu√ß√£o robusta e eficiente para o gerenciamento de contratos.",
      "screens": "As telas do CSApp foram projetadas no Figma e desenvolvidas utilizando ReactJS, oferecendo uma experi√™ncia de usu√°rio fluida e responsiva. Foram criadas p√°ginas para login, cadastro de contratos, listagem de contratos e detalhes dos contratos, todas com componentes reutiliz√°veis e estilos personalizados com CSS.",
      "techs": "A escolha das tecnologias para o CSApp foi orientada pela necessidade de efici√™ncia, seguran√ßa e escalabilidade. NodeJS foi escolhido para o back-end devido √† sua capacidade de lidar com m√∫ltiplas conex√µes simult√¢neas e √† sua efici√™ncia em aplica√ß√µes em tempo real. No front-end, utilizamos ReactJS por sua flexibilidade, reatividade e facilidade na cria√ß√£o de interfaces de usu√°rio modernas e din√¢micas. O MySQL foi selecionado como banco de dados relacional robusto e eficiente, garantindo o armazenamento seguro e estruturado dos dados dos contratos. Nginx foi utilizado para hospedar a API e a interface em ReactJS, oferecendo alta performance e estabilidade. Para garantir que a API esteja sempre dispon√≠vel e funcionando corretamente, utilizamos a ferramenta de gerenciamento de processos PM2. A autentica√ß√£o segura de usu√°rios √© realizada com JWT, enquanto a encripta√ß√£o de dados sens√≠veis √© feita com bcryptjs, adicionando uma camada extra de seguran√ßa.",
      "infrastructure": "O CSApp foi hospedado na Azure, utilizando um servidor com Oracle Linux. A infraestrutura inclui o Nginx, configurado como servidor web e proxy reverso, suportando as chamadas √† API. PM2 √© utilizado para gerenciar a API NodeJS, garantindo sua disponibilidade e performance. O MySQL serve como servidor de banco de dados para armazenar todas as informa√ß√µes dos contratos. O firewall foi configurado para permitir chamadas HTTP em portas espec√≠ficas, garantindo a seguran√ßa das comunica√ß√µes.",
      "frontend": "O front-end do CSApp foi desenvolvido com ReactJS, garantindo uma experi√™ncia de usu√°rio moderna e responsiva. Componentes reutiliz√°veis foram criados para as diferentes funcionalidades, e a comunica√ß√£o com a API √© feita atrav√©s de servi√ßos personalizados. O layout foi estilizado com CSS, garantindo uma interface limpa e intuitiva.",
      "backend": "O back-end do CSApp foi constru√≠do com NodeJS e Express, fornecendo uma API RESTful para a intera√ß√£o com o banco de dados MySQL. A seguran√ßa √© garantida com autentica√ß√£o JWT e encripta√ß√£o de dados com bcryptjs. O ORM Sequelize foi utilizado para facilitar o mapeamento objeto-relacional e a manipula√ß√£o dos dados no banco de dados."
    },
    "movie-match": {
      "title": "Movie Match",
      "description": "Movie Match √© um sistema de recomenda√ß√£o de filmes que combina avalia√ß√µes de g√™neros e Processamento de Linguagem Natural (NLP) para oferecer recomenda√ß√µes personalizadas aos usu√°rios. As recomenda√ß√µes s√£o geradas com base nas prefer√™ncias e avalia√ß√µes dos usu√°rios, proporcionando uma experi√™ncia de descoberta de filmes mais relevante e personalizada.",
      "screens": "As telas do Movie Match foram projetadas com uma abordagem centrada no usu√°rio, garantindo facilidade de uso e uma interface atraente. Utilizei HTML, CSS e JavaScript para criar as visualiza√ß√µes, enquanto o PHP gerencia a l√≥gica de exibi√ß√£o e intera√ß√£o com o usu√°rio.",
      "techs": "A escolha das tecnologias para o Movie Match foi pensada para garantir uma interface web din√¢mica. HTML, CSS e JavaScript foram utilizados para o desenvolvimento da interface web. PHP foi escolhido para a l√≥gica de back-end, gest√£o de sess√µes de usu√°rios e integra√ß√£o com o banco de dados. O servidor web Apache foi selecionado por sua confiabilidade e ampla utiliza√ß√£o. Para o armazenamento de informa√ß√µes dos usu√°rios e avalia√ß√µes de filmes, optou-se pelo MySQL, um banco de dados robusto e eficiente. Para garantir a qualidade e a confiabilidade do c√≥digo, PHPUnit foi utilizado para testes unit√°rios.",
      "infrastructure": "A infraestrutura do Movie Match foi configurada para garantir desempenho e escalabilidade. A aplica√ß√£o √© hospedada utilizando o servidor web Apache. O MySQL √© utilizado para o armazenamento de dados. O Composer √© empregado para gerenciar bibliotecas e pacotes PHP. O ambiente de desenvolvimento local foi configurado com servidor Apache e MySQL para testes e desenvolvimento cont√≠nuo.",
      "frontend": "O front-end do Movie Match foi desenvolvido utilizando HTML e CSS para a estrutura√ß√£o e estiliza√ß√£o das p√°ginas, e JavaScript para adicionar funcionalidades din√¢micas e interativas. Al√©m disso, foi implementado Processamento de Linguagem Natural (NLP) para melhorar as recomenda√ß√µes de filmes com base nas sinopses.",
      "backend": "O back-end foi implementado utilizando PHP, com foco na arquitetura MVC. Os modelos representam entidades como usu√°rios, filmes e g√™neros. Os controladores gerenciam a l√≥gica de neg√≥cios e intera√ß√µes entre o modelo e a interface do usu√°rio. As visualiza√ß√µes geram as p√°ginas HTML exibidas aos usu√°rios. Arquivos de configura√ß√£o e utilit√°rios foram criados para assegurar o funcionamento do sistema."
    },
    "britaldo-estoque": {
      "title": "Britaldo Estoque",
      "description": "Britaldo Estoque √© uma aplica√ß√£o web para a escola Britaldo Soares, com o objetivo de oferecer um controle de estoque mais eficiente, seguro e moderno. A aplica√ß√£o permite √† institui√ß√£o abandonar o controle de estoque em papel, proporcionando uma solu√ß√£o escal√°vel e adapt√°vel para outras institui√ß√µes de ensino e empresas. Nossa equipe de quatro integrantes utilizou tecnologias modernas para garantir uma experi√™ncia de usu√°rio superior e uma infraestrutura robusta.",
      "screens": "As telas do Britaldo Estoque foram projetadas no Figma e desenvolvidas com HTML, CSS, JavaScript e ReactJS, utilizando o Vite para criar uma SPA (Single Page Application) leve e fluida. A interface foi projetada para ser intuitiva e acess√≠vel em diferentes dispositivos, garantindo uma experi√™ncia consistente e eficiente para os usu√°rios.",
      "techs": "A escolha das tecnologias para o Britaldo Estoque foi orientada pela necessidade de flexibilidade, manuten√ß√£o f√°cil e alta performance. HTML, CSS e JavaScript foram utilizados como tecnologias padr√£o para desenvolvimento web, garantindo uma base s√≥lida. ReactJS com Vite foi escolhido por sua capacidade de criar Single Page Applications (SPAs) perform√°ticas e por oferecer um desenvolvimento √°gil e leve. No backend, NodeJS com Express foi utilizado para criar uma aplica√ß√£o web escal√°vel e de alta performance. Para hospedagem e banco de dados, o Firebase foi escolhido devido aos seus servi√ßos integrados de autentica√ß√£o e armazenamento NoSQL, que s√£o ideais para as nossas necessidades sem relacionamento entre tabelas. Firestore, como banco de dados NoSQL, atende √†s necessidades da aplica√ß√£o, facilitando a implementa√ß√£o e gest√£o dos dados.",
      "infrastructure": "A infraestrutura do Britaldo Estoque foi configurada para garantir desempenho, seguran√ßa e escalabilidade. Utilizamos o Firebase para hospedar a aplica√ß√£o, assegurando alta disponibilidade e seguran√ßa. O Firebase Firestore √© usado para o armazenamento de dados, permitindo uma f√°cil escalabilidade e manuten√ß√£o.",
      "frontend": "O front-end do Britaldo Estoque foi desenvolvido com foco na usabilidade e responsividade. HTML e CSS foram utilizados para a estrutura√ß√£o e estiliza√ß√£o das p√°ginas, enquanto JavaScript e ReactJS foram empregados para criar uma interface din√¢mica e interativa, com o Vite proporcionando um desenvolvimento mais r√°pido e eficiente.",
      "backend": "O back-end foi implementado utilizando NodeJS e Express. NodeJS foi escolhido para criar uma aplica√ß√£o escal√°vel e de alta performance, e o Express para gerenciar as rotas e a l√≥gica do servidor. O Firebase foi utilizado para autentica√ß√£o e gerenciamento do banco de dados Firestore, integrando perfeitamente com o resto da infraestrutura."
    },
    "sistema-reconhecimento-facial": {
      "title": "Sistema de Reconhecimento Facial",
      "description": "Sistema de reconhecimento facial desenvolvido utilizando os modelos pr√©-treinados do TensorFlow.js e a biblioteca Face API. O objetivo foi criar uma solu√ß√£o eficaz e acess√≠vel, focada na implementa√ß√£o direta no front-end, permitindo a execu√ß√£o em dispositivos com processadores menos potentes sem comprometer a precis√£o. O sistema utiliza a dist√¢ncia euclidiana entre pontos faciais para verificar a similaridade entre as faces cadastradas e as detectadas.",
      "screens": "As telas foram desenvolvidas utilizando HTML, CSS e JavaScript, com foco em uma interface amig√°vel e intuitiva. A interface permite a intera√ß√£o com o sistema de reconhecimento facial, incluindo a captura de imagens e a exibi√ß√£o dos resultados.",
      "techs": "A escolha das tecnologias para o projeto foi feita com base em suas capacidades e compatibilidades. TensorFlow.js foi escolhido por ser uma poderosa biblioteca de machine learning para JavaScript, permitindo a execu√ß√£o de modelos diretamente no navegador, o que elimina a necessidade de servidores robustos. A Face API foi selecionada devido √† sua interface simples para a detec√ß√£o e reconhecimento de rostos, sendo altamente compat√≠vel com TensorFlow.js. As tecnologias padr√£o para desenvolvimento web, como JavaScript, HTML e CSS, foram utilizadas para garantir flexibilidade e facilidade de manuten√ß√£o. No back-end, o Node.js foi empregado para lidar com a l√≥gica do servidor e comunica√ß√£o com o banco de dados. Para o armazenamento dos vetores de caracter√≠sticas das faces, o PostgreSQL foi escolhido por ser um banco de dados relacional robusto e eficiente.",
      "infrastructure": "A infraestrutura do projeto foi configurada para garantir efici√™ncia e escalabilidade. O back-end √© executado em servidores Node.js, que lidam com as requisi√ß√µes dos usu√°rios e opera√ß√µes de banco de dados. O PostgreSQL √© utilizado para armazenar os vetores de caracter√≠sticas das faces e outras informa√ß√µes relevantes. Para o desenvolvimento e testes locais, foi utilizado o VSCode com a extens√£o Live Server, que facilita o processo.",
      "frontend": "O front-end foi desenvolvido com foco na usabilidade e acessibilidade. HTML e CSS foram empregados para a estrutura√ß√£o e estiliza√ß√£o das p√°ginas, enquanto o JavaScript foi utilizado para a manipula√ß√£o din√¢mica do DOM e integra√ß√£o com as APIs de reconhecimento facial. TensorFlow.js e a Face API foram integrados para realizar o reconhecimento facial diretamente no navegador, proporcionando uma experi√™ncia fluida ao usu√°rio.",
      "backend": "O back-end foi implementado utilizando Node.js. Express.js foi utilizado para a cria√ß√£o de rotas e manipula√ß√£o de requisi√ß√µes HTTP. O PostgreSQL foi escolhido para o armazenamento dos dados. Al√©m disso, foram implementadas RESTful APIs para comunica√ß√£o entre o front-end e o back-end, garantindo uma arquitetura modular e escal√°vel."
    }
  }
}